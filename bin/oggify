#!/usr/bin/env python

# oggify -- Command-line interface for Oggify
# Copyright (c) 2007 Scott Paul Robertson (spr@scottr.org)
#
# This is part of Oggify (http://scottr.org/oggify/)
#
# Oggify is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version
# 
# Oggify is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Oggify; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from oggify import Oggify, plugins
from optparse import OptionParser
from os import path
import sys, os, tempfile, signal

temp_file = tempfile.mkstemp()[1]

def handler(signum=0, frame=None):
    os.unlink(temp_file)
    sys.exit(-1)

def setup_parser(parser):
    parser.add_option("-s", "--source", dest="source_plugin",
            help="Select the source format to use [default=%default].")
    parser.set_defaults(source_plugin="flac")
    parser.add_option("-o", "--output", dest="output_plugin",
            help="Select the output format to use [default=%default].")
    parser.set_defaults(output_plugin="ogg")
    parser.add_option("-v", "--verbose", action="store_true",
            dest="verbose", help="More detailed output.")
    parser.set_defaults(verbose=False)
    parser.add_option("-q", "--quality", type="int", dest="quality",
            help="Sets the quality to VALUE [default=%default].",
            metavar="VALUE")
    parser.set_defaults(quality=5)
    parser.add_option("-L", "--follow-symlinks", action="store_true",
            dest="follow_symlinks", help="Follow symlinks in source tree")
    parser.set_defaults(follow_symlinks=False)
    parser.add_option("-n", "--nice", type="int", dest="nice",
            help="nice the tasks to VALUE [default=%default].",
            metavar="VALUE")
    parser.set_defaults(nice=10)
    parser.add_option("-p", "--pretend", action="store_true",
            dest="pretend", help="Print actions that will be performed.")
    parser.set_defaults(pretend=False)
    parser.add_option("-P", "--purge", action="store_true", dest="purge",
            help="Remove unmatched items and directories from destination.")
    parser.set_defaults(purge=False)
    parser.add_option("-r", "--refresh", action="store_true", dest="refresh",
            help="Re-encode files that are older than the source file.")
    parser.set_defaults(refresh=False)
    parser.add_option("-c", "--clean", action="store_true", dest="clean",
            help="Remove files that are encoded in the incorrect format.")
    parser.set_defaults(clean=False)

def verify_options(options):
    if options.quality < 0 or options.quality > 10:
        print >>sys.stderr, "Quality %s is not between 0 and 10" % options.quality
        return False
    if options.source_plugin not in Oggify.list_plugins('input'):
        print >>sys.stderr, "%s not an input plugin" % options.source_plugin
        return False
    if options.output_plugin not in Oggify.list_plugins('output'):
        print >>sys.stderr, "%s not an output plugin" % options.output_plugin
        return False
    if options.nice < -20 or options.nice > 19:
        print >>sys.stderr, "Nice value %s not between -20 and 18" % options.nice
        return False
    return True

def verify_args(args):
    if len(args) != 2:
        print >>sys.stderr, "Need to specify a source and destination only."
        return False
    if not os.path.exists(args[0]):
        print >>sys.stderr, "%s does not exist, not a valid src directory" % args[0]
        return False
    return True

def reencode_file(src, dst, decoder, encoder, quality, nice, verbose):
    if path.getmtime(src) > path.getmtime(dst):
        Oggify.process_file(decoder, encoder, src, quality, nice, verbose)

def pretend(encode, reencode, limited_purge, purge, options):
    encode_keys = encode.keys()
    encode_keys.sort()
    for src in encode_keys:
        print "Encoding %s to %s" % (src, encode[src])
    if options.refresh:
        reencode_keys = reencode.keys()
        reencode_keys.sort()
        for src in reencode_keys:
            if path.getmtime(src) > path.getmtime(dst):
                print "Encoding %s to %s" % (src, reencode[src])
    if options.clean:
        for item in limited_purge:
            print "Removing %s" % item
    if options.purge:
        for item in purge:
            print "Removing %s" % item

def main(argv=sys.argv):
    usage = "%prog [options] <src> <dest>"
    desc = """Input Plugins: %s Output Plugins: %s
    """ % (Oggify.list_plugins('input'), Oggify.list_plugins('output'))
    version = "%prog 2.0.0b1"
    parser = OptionParser(usage=usage, description=desc, version=version)
    setup_parser(parser)

    options, args = parser.parse_args()

    if not verify_options(options):
        parser.print_help()
        return -1
    if not verify_args(args):
        parser.print_help()
        return -1

    decoder = Oggify.load_plugin(options.source_plugin, 'input')
    encoder = Oggify.load_plugin(options.output_plugin, 'output')

    encode, reencode, limited_purge, purge = Oggify.diff(args[0], args[1],
            decoder.extension, encoder.extension, options.follow_symlinks)

    if options.pretend:
        pretend(encode, reencode, limited_purge, purge, options)
        return 0

    encode_keys = encode.keys()
    encode_keys.sort()
    for src in encode_keys:
        Oggify.process_file(decoder, encoder, src, encode[src],
                options.quality, options.nice, options.verbose, temp_file)

    if options.refresh:
        reencode_keys = reencode.keys()
        reencode_keys.sort()
        for src in reencode_keys:
            reencode_file(src, reencode[src], decoder, encoder,
                    options.quality, options.nice, options.verbose)

    if options.clean:
        for item in limited_purge:
            Oggify.purge(item)
    if options.purge:
        for item in purge:
            Oggify.purge(item)
    return 0

if __name__ == '__main__':
    signal.signal(signal.SIGINT, handler)
    signal.signal(signal.SIGHUP, handler)
    signal.signal(signal.SIGTERM, handler)
    sys.exit(main())
